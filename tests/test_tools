import pytest
from unittest.mock import patch, AsyncMock
from backend.tools import handle_execute_script

@pytest.mark.asyncio
async def test_handle_execute_script():
    params = {"command": "echo 'hello world'", "working_dir": "."}
    session_id = "test_session"
    user_prompt = "Test prompt"

    with patch('backend.tools.run_in_user_namespace', new_callable=AsyncMock) as mock_run:
        mock_run.return_value = {"status": "success", "data": "hello world"}

        result = await handle_execute_script(params, session_id, user_prompt)

        assert result["status"] == "success"
        assert result["data"] == "hello world"

@pytest.mark.asyncio
async def test_handle_execute_script_error():
    params = {"command": "invalid_command", "working_dir": "."}
    session_id = "test_session"
    user_prompt = "Test prompt"

    with patch('backend.tools.run_in_user_namespace', new_callable=AsyncMock) as mock_run:
        mock_run.return_value = {"status": "error", "message": "Command not found", "exit_code": 127}

        result = await handle_execute_script(params, session_id, user_prompt)

        assert result["status"] == "error"
        assert result["message"] == "Command not found"
