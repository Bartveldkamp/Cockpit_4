# tests/test_end_to_end.py
import pytest
import json
from unittest.mock import patch, AsyncMock
from backend.agent_core import run_agent
from backend.utils import SecurityDecision

@pytest.fixture(autouse=True)
def override_settings(tmp_path):
    with patch('backend.tools.VAULT_ROOT', str(tmp_path)):
        with patch('backend.agent_core.settings.max_retries', 1):
             yield

@pytest.mark.asyncio
async def test_end_to_end_agent_execution(tmp_path):
    user_prompt = "Create a new directory called 'my_test_project'."
    session_id = "test-e2e-session"
    
    with patch('backend.agent_core.memory_manager.retrieve_from_memory', return_value=[]):
        with patch('backend.utils.validate_plan_semantically') as mock_critic:
            mock_critic.side_effect = lambda plan_list, *args, **kwargs: (True, "Test approval", plan_list)
            with patch('backend.tools.assess_command', new_callable=AsyncMock) as mock_assess:
                mock_assess.return_value = SecurityDecision(is_safe=True, reasoning="Test")
                with patch('backend.tools.run_in_user_namespace') as mock_run:
                    mock_run.return_value = {"status": "success", "output": "Directory created."}
                    with patch('backend.agent_core.get_llm_response', new_callable=AsyncMock) as mock_llm:
                        mock_llm.return_value = json.dumps({
                            "plan": [{"tool": {"name": "execute_script"}, "parameters": {"command": "mkdir my_test_project", "working_dir": "."}, "reason": "Test"}]
                        })
                        result = await run_agent(user_prompt, session_id, [])
                        print(f"Final response from agent: {result['response']}")
                        assert result['response'] == "Directory created."
