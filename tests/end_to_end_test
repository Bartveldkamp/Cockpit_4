# tests/test_end_to_end.py

import pytest
import json
from unittest.mock import patch, AsyncMock
from backend.agent_core import run_agent

# We patch the VAULT_ROOT setting to use a temporary directory for this test
@pytest.fixture(autouse=True)
def override_settings(tmp_path):
    with patch('backend.tools.VAULT_ROOT', str(tmp_path)):
        with patch('backend.agent_core.settings.max_retries', 1): # Faster tests
             yield

@pytest.mark.asyncio
async def test_end_to_end_agent_execution(tmp_path):
    user_prompt = "Create a new directory called 'my_test_project'."
    session_id = "test-e2e-session"
    chat_history = []
    
    # The agent will create its session vault inside tmp_path
    # This automatically passes the security checks.

    # 1. Mock the Plan Critic to always approve the plan
    with patch('backend.utils.validate_plan_semantically') as mock_critic:
        # The critic returns (is_logical, comment, plan_list)
        # We mock it to simply approve the plan it receives.
        mock_critic.side_effect = lambda plan_list, *args, **kwargs: (True, "Test approval", plan_list)

        # 2. Mock the Security Officer to always approve the command
        with patch('backend.tools.assess_command', new_callable=AsyncMock) as mock_assess:
            mock_assess.return_value = {"is_safe": True, "reasoning": "Test"}
            
            # 3. Mock the actual execution to prevent real file system changes
            with patch('backend.tools.run_in_user_namespace') as mock_run:
                mock_run.return_value = {"status": "success", "output": "Directory created."}

                # --- Execute the agent ---
                result = await run_agent(user_prompt, session_id, chat_history, correlation_id="test-e2e")
                
                # --- Assertions ---
                print(f"Final response from agent: {result['response']}")
                assert result['response'] == "Directory created."
