# tests/test_end_to_end.py

import pytest
from unittest.mock import patch, AsyncMock
import json
from backend.agent_core import run_agent

@pytest.mark.asyncio
async def test_end_to_end_agent_execution():
    user_prompt = "Create a new Python project and set up a virtual environment."
    session_id = "test-session-id"
    chat_history = []

    mock_plan_json_string = json.dumps({
        "plan": [
            {
                "tool": {"name": "execute_script"},
                "parameters": {"command": "mkdir my_new_project"},
                "reason": "Create a new directory for the Python project."
            },
            {
                "tool": {"name": "execute_script"},
                "parameters": {"command": "ls"},
                "reason": "Verify the directory was created."
            }
        ]
    })

    with patch('backend.agent_core.get_llm_response', new_callable=AsyncMock, return_value=mock_plan_json_string):
        result = await run_agent(user_prompt, session_id, chat_history)

        print(f"Final response from agent: {result['response']}")

        assert "Invalid plan structure" not in result["response"]
        assert "error" not in result["response"].lower()
        assert "my_new_project" in result["response"]

# tests/test_tools.py

import pytest
from unittest.mock import patch, AsyncMock
from backend.tools import handle_execute_script

@pytest.mark.asyncio
async def test_handle_execute_script():
    params = {"command": "echo 'hello world'", "working_dir": "."}
    session_id = "test_session"
    user_prompt = "Test prompt"

    with patch('backend.tools.run_in_user_namespace', new_callable=AsyncMock) as mock_run:
        mock_run.return_value = {"status": "success", "data": "hello world"}

        result = await handle_execute_script(params, session_id, user_prompt)

        assert result["status"] == "success"
        assert result["data"] == "hello world"

@pytest.mark.asyncio
async def test_handle_execute_script_error():
    params = {"command": "invalid_command", "working_dir": "."}
    session_id = "test_session"
    user_prompt = "Test prompt"

    with patch('backend.tools.run_in_user_namespace', new_callable=AsyncMock) as mock_run:
        mock_run.return_value = {"status": "error", "message": "Command not allowed"}

        result = await handle_execute_script(params, session_id, user_prompt)

        assert result["status"] == "error"
        assert result["message"] == "Command not allowed"
